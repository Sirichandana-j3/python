class Solution:
    def letterCombinations(self, digits):
        if not digits:
            return []
        
        # Mapping from digits to letters
        phone_map = {
            "2": "abc", "3": "def", "4": "ghi", "5": "jkl",
            "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"
        }
        
        result = []
        
        def backtrack(index, path):
            # If the path length equals the digits length, we have a complete combination
            if index == len(digits):
                result.append("".join(path))
                return
            
            # Get the letters that the current digit maps to
            possible_letters = phone_map[digits[index]]
            
            # Explore all letters for the current digit
            for letter in possible_letters:
                path.append(letter)        # Choose
                backtrack(index + 1, path)  # Explore
                path.pop()                 # Un-choose (backtrack)
        
        backtrack(0, [])
        return result
